esphome:
  name: "desktop-pomodoro"
  friendly_name: Desktop Pomodoro
  min_version: 2025.5.0
  name_add_mac_suffix: false

  on_boot:
    - priority: 600.0 
      then:
        - script.execute: init_script
      
    - priority: -100.0
      then:
        - component.update: small_timer_duration
        - component.update: large_timer_duration


esp32:
  board: lolin32_lite
  framework:
    type: esp-idf

logger:
  level: debug

api:
  encryption:
    key: !secret api_encryption_key

ota:
  - platform: esphome

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

time:
  - platform: sntp
    id: sntp_time


globals:
  - id: timer
    type: int
    restore_value: no
    initial_value: '40'

  - id: fsm_state
    type: int
    restore_value: yes
    initial_value: '0'  # 0: IDLE, 1: LARGE_TIMER, 2: SMALL_TIMER, 3: DONE

  - id: led_index
    type: int
    restore_value: no
    initial_value: '0'

  - id: large_timer_set_duration
    type: int
    restore_value: yes
    initial_value: '40'

  - id: small_timer_set_duration
    type: int
    restore_value: yes
    initial_value: '5'

  - id: current_total_duration
    type: int
    restore_value: yes
    initial_value: '40'

  - id: display_enabled
    type: bool
    restore_value: yes
    initial_value: 'true'

  - id: led_strip_enabled
    type: bool
    restore_value: yes
    initial_value: 'true'

  - id: start_time_millis
    type: int
    restore_value: yes
    initial_value: '0'

light:
  - platform: esp32_rmt_led_strip
    id: led_strip
    pin: GPIO16
    chipset: WS2812
    num_leds: 8
    rgb_order: GRB
    name: "LED Strip"
    effects: 
      - addressable_rainbow:
          name: "Rainbow"
      - addressable_lambda: 
          name: "Timer effect"
          update_interval: 1s
          lambda: |-
            Color color;
            if (id(fsm_state) == 1) { // Large timer mode
              color = Color(0x00FF00); // Fixed Green
            } else if (id(fsm_state) == 2) { // Small timer mode
              color = Color(0xFF0000); // Fixed Red
            } else {
              color = Color::BLACK;
            }
            for (int i = 0; i < it.size(); i++) {
              it[i] = i < id(led_index) ? color : Color::BLACK;
            }

display:
    platform: tm1637
    id: tm1637_display
    clk_pin: GPIO19
    dio_pin: GPIO23
    inverted: true
    intensity: 0
    length: 4
    update_interval: never
                
binary_sensor:
  - platform: gpio
    pin:
      number: GPIO17
      mode: INPUT_PULLUP
      inverted: true
    name: "Start Large Timer Button"
    id: start_large_timer_button
    filters:
      - delayed_on: 10ms
      - delayed_off: 10ms
    on_press:
      then:
        - lambda: |-
            id(fsm_state) = 1;
            id(timer) = id(large_timer_set_duration) + 1;
            id(current_total_duration) = id(large_timer_set_duration);
            id(start_time_millis) =id(sntp_time).now().timestamp;
        - script.execute: interval_timer
    on_multi_click: 
      - timing: [ ON for at least 1s ]
        then:
          - lambda: |-
              id(led_strip_enabled) = !id(led_strip_enabled);
          - script.execute: update_effect

  - platform: gpio
    pin:
      number: GPIO18
      mode: INPUT_PULLUP
      inverted: true
    name: "Start Small Timer Button"
    id: start_small_timer_button
    filters:
      - delayed_on: 10ms
      - delayed_off: 10ms
    on_press:
      then:
        - lambda: |-
            id(fsm_state) = 2;
            id(timer) = id(small_timer_set_duration) + 1;
            id(current_total_duration) = id(small_timer_set_duration);
            id(start_time_millis) = id(sntp_time).now().timestamp;
        - script.execute: interval_timer
    on_multi_click:
      - timing: [ ON for at least 1000ms ]
        then:
          - lambda: |-
              id(display_enabled) = !id(display_enabled);
          - script.execute: toggle_display_visibility


script:
  - id: init_script
    then:
      - lambda: |-
          while (!id(sntp_time).now().is_valid()) {
            delay(1000);            
          }
          auto timestamp = id(sntp_time).now().timestamp; 
          
          auto secs_diff = timestamp - id(start_time_millis);

          if ((id(fsm_state) == 1 || id(fsm_state) == 2) && secs_diff > 0) {
            auto minutes_diff = secs_diff / 60;
            auto seconds_diff = (minutes_diff + 1)* 60 - secs_diff;
            id(timer) = id(current_total_duration) - minutes_diff;
            
            id(full_update).execute();
            
            delay(seconds_diff * 1000);
            id(interval_timer).execute();
            return;
          }
          
          id(timer) = 0;
          
          id(fsm_state) = 3;
          ESP_LOGD("init_script", "new fsm_state: %d", id(fsm_state));
          id(full_update).execute();


  - id: full_update
    then:
      - script.execute: calculate_light_led
      - script.execute: update_effect
      - script.execute: update_display
      - logger.log: 
          format: "Update display: led - %d, timer - %d, fsm_state - %d"
          args: [ 'id(led_index)', 'id(timer)', 'id(fsm_state)' ]
  

  - id: toggle_display_visibility
    then:
      - lambda: |-
          if (id(display_enabled)) {
            id(tm1637_display).set_intensity(0);
          } else {
            id(tm1637_display).set_intensity(-1);
          }

  # Led scripts
  - id: calculate_light_led
    then:
      - lambda: |-
          if (id(fsm_state) == 1 || id(fsm_state) == 2) {
            id(led_index) = (id(timer) * 8) / id(current_total_duration);
          } else {
            id(led_index) = 0;
          }


  - id: update_effect
    then:
      - lambda: |-
          if (!id(led_strip_enabled) || id(fsm_state) == 0) {
            id(led_strip).turn_off().perform();
            return;
          } 
          if (id(fsm_state) == 1 || id(fsm_state) == 2) {
            id(led_strip).turn_on().set_effect("Timer effect").perform();  
          } else if (id(fsm_state) == 3) {
            id(led_strip).turn_on().set_effect("Rainbow").perform();
          }   
          
      - logger.log: 
          format: "LED effect updated: led - %d, timer - %d, fsm_state - %d"
          args: [ 'id(led_index)', 'id(timer)', 'id(fsm_state)' ]
  # Display scripts
  - id: blink_display
    mode: restart
    then:
      - while:
          condition:
            lambda: 'return id(fsm_state) == 3;'
          then:
            - lambda: |-
                id(tm1637_display).printf("____");
                id(tm1637_display).display();
            - delay: 200ms
            - lambda: |-
                id(tm1637_display).printf("----");
                id(tm1637_display).display();
            - delay: 200ms
            - lambda: |-
                id(tm1637_display).printf("****");
                id(tm1637_display).display();
            - delay: 200ms
            - lambda: |-
                id(tm1637_display).printf("----");
                id(tm1637_display).display();
            - delay: 200ms
            - lambda: |-
                id(tm1637_display).printf("____");
                id(tm1637_display).display();
            - delay: 200ms
            - logger.log: "Display blinked"
  

  - id: update_display
    then:
      - lambda: |-
          if (id(display_enabled)) {
            if (id(fsm_state) == 1) {  // Large timer
              id(tm1637_display).printf(0, "L %2d", id(timer));
              id(tm1637_display).display();
            } else if (id(fsm_state) == 2) {  // Small timer
              id(tm1637_display).printf(0, "S %2d", id(timer));
              id(tm1637_display).display();
            } else if (id(fsm_state) == 3) {  // Done
              id(blink_display).execute();
            }
          } else {
            id(tm1637_display).printf(0, "    ");
            id(tm1637_display).display();
          }

  - id: interval_timer
    mode: restart
    then:
      - while:
          condition:
            lambda: 'return id(timer) > 0;'
          then:
            - lambda: |-
                id(timer) -= 1;
                if (id(timer) <= 0) {
                  id(fsm_state) = 3;
                }
            - script.execute: full_update
            - delay: 1min

number:
  - platform: template
    name: "Large Timer Duration"
    id: large_timer_duration
    min_value: 1
    max_value: 120
    step: 1
    mode: BOX
    lambda: |-
        return id(large_timer_set_duration);
    optimistic: false
    set_action:
      - lambda: |
          id(large_timer_set_duration) = x;
          id(large_timer_duration).publish_state(x);

          if (id(fsm_state) == 1) { // Если большой таймер активен
            id(timer) = x + 1; // Обновить текущий таймер новой длительностью
            id(current_total_duration) = x; // Обновить общую длительность
            id(interval_timer).execute();
          }


  - platform: template
    name: "Small Timer Duration"
    id: small_timer_duration
    min_value: 1
    max_value: 30
    step: 1
    mode: BOX
    lambda: |-
        return id(small_timer_set_duration);
    optimistic: false
    set_action:
      - lambda: |
          id(small_timer_set_duration) = x;
          id(small_timer_duration).publish_state(x);

          if (id(fsm_state) == 2) { // Если малый таймер активен
            id(timer) = x + 1; // Обновить текущий таймер новой длительностью
            id(current_total_duration) = x; // Обновить общую длительность
            id(interval_timer).execute();
          }


sensor:
  - platform: uptime
    name: "Uptime Sensor"
    id: uptime_sensor


button:
  - platform: template
    name: "Start Large Timer"
    on_press:
      then:
        - lambda: |-
            id(fsm_state) = 1;
            id(timer) = id(large_timer_set_duration) + 1;
            id(current_total_duration) = id(large_timer_set_duration);
            id(start_time_millis) = id(sntp_time).now().timestamp;
        - script.stop: blink_display
        - script.execute: interval_timer

  - platform: template
    name: "Start Small Timer"
    on_press:
      then:
        - lambda: |-
            id(fsm_state) = 2;
            id(timer) = id(small_timer_set_duration) + 1;
            id(current_total_duration) = id(small_timer_set_duration);
            id(start_time_millis) = id(sntp_time).now().timestamp;
        - script.stop: blink_display
        - script.execute: interval_timer