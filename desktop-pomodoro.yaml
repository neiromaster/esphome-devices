esphome:
  name: "desktop-pomodoro"
  friendly_name: Desktop Pomodoro
  min_version: 2025.5.0
  name_add_mac_suffix: false
    
  on_boot:
    - priority: 600.0 
      then:
        - script.execute: init_script
      
    - priority: -100.0
      then:
        - component.update: small_timer_duration
        - component.update: large_timer_duration
  

esp32:
  board: lolin32_lite
  framework:
    type: esp-idf

logger:
  level: debug
  baud_rate: 0

api:
  encryption:
    key: !secret api_encryption_key

ota:
  - platform: esphome

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  # power_save_mode: HIGH
  output_power: 8.5dB
  fast_connect: True
  manual_ip: !secret desktop_pomodoro

time:
  - platform: sntp
    id: sntp_time


globals:
  - id: timer
    type: int
    restore_value: no
    initial_value: '40'

  - id: FSM_IDLE
    type: int
    initial_value: '0'
  - id: FSM_LARGE_TIMER
    type: int
    initial_value: '1'
  - id: FSM_SMALL_TIMER
    type: int
    initial_value: '2'
  - id: FSM_DONE
    type: int
    initial_value: '3'

  - id: fsm_state
    type: int
    restore_value: yes
    initial_value: '0'  # 0: IDLE, 1: LARGE_TIMER, 2: SMALL_TIMER, 3: DONE

  - id: led_index
    type: int
    restore_value: no
    initial_value: '0'

  - id: large_timer_set_duration
    type: int
    restore_value: yes
    initial_value: '40'

  - id: small_timer_set_duration
    type: int
    restore_value: yes
    initial_value: '5'

  - id: current_total_duration
    type: int
    restore_value: yes
    initial_value: '40'

  - id: display_enabled
    type: bool
    restore_value: yes
    initial_value: 'true'

  - id: led_strip_enabled
    type: bool
    restore_value: yes
    initial_value: 'true'

  - id: start_time_millis
    type: int
    restore_value: yes
    initial_value: '0'

  - id: seconds_remaining
    type: int
    restore_value: no
    initial_value: '0'

light:
  - platform: esp32_rmt_led_strip
    id: led_strip
    pin: GPIO16
    chipset: WS2812
    num_leds: 8
    rgb_order: GRB
    name: "LED Strip"

    effects: 
      - addressable_rainbow:
          name: "Rainbow"
      - addressable_lambda: 
          name: "Timer effect"
          update_interval: 1s
          lambda: |-
            Color color;
            if (id(fsm_state) == id(FSM_LARGE_TIMER)) { // Large timer mode
              color = Color(0x00FF00); // Fixed Green
            } else if (id(fsm_state) == id(FSM_SMALL_TIMER)) { // Small timer mode
              color = Color(0xFF0000); // Fixed Red
            } else {
              color = Color::BLACK;
            }
            for (int i = 0; i < it.size(); i++) {
              it[i] = i < id(led_index) ? color : Color::BLACK;
            }

display:
    platform: tm1637
    id: tm1637_display
    clk_pin: GPIO19
    dio_pin: GPIO23
    inverted: true
    intensity: 0
    length: 4
    update_interval: never
                
binary_sensor:
  - platform: gpio
    pin:
      number: GPIO17
      mode: INPUT_PULLUP
      inverted: true
    name: "Start Large Timer Button"
    id: start_large_timer_button
    filters:
      - delayed_on: 10ms
      - delayed_off: 10ms
    on_press:
      then:
        - lambda: |-
            id(fsm_state) = id(FSM_LARGE_TIMER);
            id(timer) = id(large_timer_set_duration);
            id(current_total_duration) = id(large_timer_set_duration);
            id(start_time_millis) = id(sntp_time).now().timestamp;
        - script.execute: interval_timer
    on_multi_click: 
      - timing: [ ON for at least 1s ]
        then:
          - lambda: |-
              id(led_strip_enabled) = !id(led_strip_enabled);
          - script.execute: update_effect

  - platform: gpio
    pin:
      number: GPIO18
      mode: INPUT_PULLUP
      inverted: true
    name: "Start Small Timer Button"
    id: start_small_timer_button
    filters:
      - delayed_on: 10ms
      - delayed_off: 10ms
    on_press:
      then:
        - lambda: |-
            id(fsm_state) = id(FSM_SMALL_TIMER);
            id(timer) = id(small_timer_set_duration);
            id(current_total_duration) = id(small_timer_set_duration);
            id(start_time_millis) = id(sntp_time).now().timestamp;
        - script.execute: interval_timer
    on_multi_click:
      - timing: [ ON for at least 1000ms ]
        then:
          - lambda: |-
              id(display_enabled) = !id(display_enabled);
          - script.execute: toggle_display_visibility


script:
  - id: init_script
    then:
      - wait_until:
          condition:
            lambda: 'return id(sntp_time).now().is_valid();'
          timeout: 1s
      - if:
          any:
            - lambda: 'return id(fsm_state) == id(FSM_LARGE_TIMER);'
            - lambda: 'return id(fsm_state) == id(FSM_SMALL_TIMER);'
          then:
            - lambda: |-
                auto timestamp = id(sntp_time).now().timestamp; 
                auto elapsed_seconds = timestamp - id(start_time_millis);
                auto total_duration_seconds = id(current_total_duration) * 60;
                auto remaining_seconds = total_duration_seconds - elapsed_seconds;

                if (remaining_seconds <= 0) {
                  id(timer) = 0;
                  id(fsm_state) = id(FSM_DONE);
                  id(seconds_remaining) = 0; // Ensure seconds_remaining is also 0
                } else {
                  id(timer) = remaining_seconds / 60;
                  if (remaining_seconds % 60 != 0) {
                    id(timer)++;
                  }
                  id(seconds_remaining) = remaining_seconds % 60;
                }
            - script.execute: interval_timer
          else:
            - script.execute: interval_timer

  

  - id: full_update
    then:
      - script.execute: calculate_light_led
      - script.execute: update_effect
      - script.execute: update_display
      - logger.log: 
          format: "Update display: led - %d, timer - %d, fsm_state - %d"
          args: [ 'id(led_index)', 'id(timer)', 'id(fsm_state)' ]
  

  - id: toggle_display_visibility
    then:
      - lambda: |-
          if (id(display_enabled)) {
            id(tm1637_display).set_intensity(0);
          } else {
            id(tm1637_display).set_intensity(-1);
          }

  # Led scripts
  - id: calculate_light_led
    then:
      - lambda: |-
          if (id(fsm_state) == id(FSM_LARGE_TIMER) || id(fsm_state) == id(FSM_SMALL_TIMER)) {
            id(led_index) = (id(timer) * 8 + id(current_total_duration) - 1) / id(current_total_duration);
          } else {
            id(led_index) = 0;
          }


  - id: update_effect
    then:
      - if:
          all:
            - lambda: 'return id(led_strip_enabled);'
            - lambda: 'return id(fsm_state) != id(FSM_IDLE);'
          then:
            - if:
                any:
                  - lambda: 'return id(fsm_state) == id(FSM_LARGE_TIMER);'
                  - lambda: 'return id(fsm_state) == id(FSM_SMALL_TIMER);'
                then:
                  - light.turn_on: 
                      id: led_strip
                      effect: Timer effect

                else:
                  - light.turn_on: 
                      id: led_strip
                      effect: Rainbow
          else:
            - light.turn_off: led_strip
          
      - logger.log: 
          format: "LED effect updated: led - %d, timer - %d, fsm_state - %d"
          args: [ 'id(led_index)', 'id(timer)', 'id(fsm_state)' ]
          
  # Display scripts
  - id: blink_display
    mode: restart
    then:
      - while:
          condition:
            lambda: 'return id(fsm_state) == id(FSM_DONE);'
          then:
            - lambda: |-
                id(tm1637_display).printf("----");
                id(tm1637_display).display();
            - delay: 200ms
            - lambda: |-
                id(tm1637_display).printf("****");
                id(tm1637_display).display();
            - delay: 200ms
            - lambda: |-
                id(tm1637_display).printf("----");
                id(tm1637_display).display();
            - delay: 200ms
            - lambda: |-
                id(tm1637_display).printf("____");
                id(tm1637_display).display();
            - delay: 200ms
            

  - id: update_display
    mode: restart
    then:
      - script.stop: blink_display
      - lambda: |-
          if (!id(display_enabled)) {
            id(tm1637_display).printf(0, "    ");
            id(tm1637_display).display();
          } 
          switch (id(fsm_state)) {
            case 0:
              id(tm1637_display).printf(0, "    ");
              id(tm1637_display).display();
              break;
            case 1:
              id(tm1637_display).printf(0, "L%3d", id(timer));
              id(tm1637_display).display();
              break;
            case 2:
              id(tm1637_display).printf(0, "S%3d", id(timer));
              id(tm1637_display).display();
              break;
            case 3:
              id(blink_display).execute();
              break;
            default:
              id(tm1637_display).printf(0, "    ");
              id(tm1637_display).display();
              break;
          }
      - logger.log: 
          format: "Display updated: led - %d, timer - %d, fsm_state - %d"
          args: [ 'id(led_index)', 'id(timer)', 'id(fsm_state)' ]
          

  - id: interval_timer
    mode: restart
    then:
      - script.stop: blink_display
      - if:
          all:
            - lambda: 'return id(timer) > 0;'
            - lambda: 'return id(seconds_remaining) > 0;'
          then:
            - script.execute: full_update
            - delay: !lambda "return id(seconds_remaining) * 1000;"
            - lambda: |-
                id(timer) -= 1;
      - while:
          condition:
            lambda: 'return id(timer) > 0;'
          then:
            - script.execute: full_update
            - delay: 1min
            - lambda: |-
                id(timer) -= 1;
            - logger.log: 
                format: "Timer updated: %d"
                args: [ id(timer) ]
      - lambda: |-
          id(fsm_state) = id(FSM_DONE);
      - logger.log: "Timer finished, fsm_state = 3"
      - script.execute: full_update
      - script.execute: idle_timeout_script

  - id: idle_timeout_script
    mode: restart
    then:
      - delay: 5min
      - if:
          condition:
            lambda: 'return id(fsm_state) == id(FSM_DONE);'
          then:
            - lambda: |-
                id(fsm_state) = id(FSM_IDLE);
            - script.execute: full_update
            - logger.log: "Inactivity timeout: transitioned to FSM_IDLE"

number:
  - platform: template
    name: "Large Timer Duration"
    id: large_timer_duration
    min_value: 1
    max_value: 120
    step: 1
    mode: BOX
    lambda: |-
        return id(large_timer_set_duration);
    optimistic: false
    set_action:
      - lambda: |
          id(large_timer_set_duration) = x;
          id(large_timer_duration).publish_state(x);

          if (id(fsm_state) == id(FSM_LARGE_TIMER)) { // Если большой таймер активен
            id(timer) = x; // Обновить текущий таймер новой длительностью
            id(current_total_duration) = x; // Обновить общую длительность
            id(interval_timer).execute();
          }


  - platform: template
    name: "Small Timer Duration"
    id: small_timer_duration
    min_value: 1
    max_value: 30
    step: 1
    mode: BOX
    lambda: |-
        return id(small_timer_set_duration);
    optimistic: false
    set_action:
      - lambda: |
          id(small_timer_set_duration) = x;
          id(small_timer_duration).publish_state(x);

          if (id(fsm_state) == id(FSM_SMALL_TIMER)) { // Если малый таймер активен
            id(timer) = x; // Обновить текущий таймер новой длительностью
            id(current_total_duration) = x; // Обновить общую длительность
            id(interval_timer).execute();
          }


sensor:
  - platform: uptime
    name: "Uptime Sensor"
    id: uptime_sensor

  - platform: wifi_signal
    name: "WiFi Signal"
    update_interval: 30s


button:
  - platform: template
    name: "Start Large Timer"
    on_press:
      then:
        - lambda: |-
            id(fsm_state) = id(FSM_LARGE_TIMER);
            id(timer) = id(large_timer_set_duration);
            id(current_total_duration) = id(large_timer_set_duration);
            id(start_time_millis) = id(sntp_time).now().timestamp;
        - script.execute: interval_timer

  - platform: template
    name: "Start Small Timer"
    on_press:
      then:
        - lambda: |-
            id(fsm_state) = id(FSM_SMALL_TIMER);
            id(timer) = id(small_timer_set_duration);
            id(current_total_duration) = id(small_timer_set_duration);
            id(start_time_millis) = id(sntp_time).now().timestamp;
        - script.execute: interval_timer
  
  - platform: restart
    name: "Timer Restart"